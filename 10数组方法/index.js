/**
 * map方法 
 *  //遍历数组的所有元素
 *  //生成新的数组，数组的长度和原来一样 
 * 第一个参数：回调函数
 * 
 *  回调函数的第一个参数：数组的元素
 *  回调函数的第二个参数：数组的下标 index
 * 
 *  返回值：新的数组
 */


 //常规写法
// let arr1 = [1,2,3,4].map(function(ele,i){
//     return ele * 2; 
// })

// console.log(arr1); //[2, 4, 6, 8]
//  //箭头函数写法

// let arr2 =  [1,2,3,4].map((ele,i)=>{
//     return ele * 2;
//  })

//  console.log(arr2);//[2, 4, 6, 8]



 //----------------------------------------------------------------------------------------------


 /**
  * filter方法
  *     //回遍历数据的所有元素    
  *     //过滤数组元素
  *     //得到新的数组的长度可能发生变化
  *     
  * 
  *     第一个参数是一个回调函数，
  *     回调函数的第一个参数 数组元素
  *     回调函数的第二个参数 数组元素的索引
  *     回调函数的第三个参数
  *     
  *   //返回值  一个新的数组 
  * 
  */

//   let arr3 = [1,2,3,4].filter((ele,i)=>{
//     return ele>3 

//     //reutrn 返回值为真，当前元素会被保留下来 返回值为假，当前遍历到元素会被移出去
//   })

//   console.log(arr3); //[4]






 //----------------------------------------------------------------------------------------------


  /**
  * some方法
  *     //功能回遍历数据的所有元素    
  *     //回调函数只要有一次返回true，这个函数就会返回true
  * 
  *     第一个参数是一个回调函数 
  * 
  *     回调函数的第一个参数 是数组的元素
  *     回调函数的第二个参数 是数组元素的索引   可选参数
  *     回调函数的第三个参数 是some()被调用的数组。 可选参数
  * 
  *     //返回值是一个布尔值 
  * 
  */

//  let arr4 = [1,2,3,4].some((ele,i)=>{
//         return ele>3   //返回值只要有一次返回为真就返回true 
     
//  })

//  console.log(arr4);

   //----------------------------------------------------------------------------------------------


  /**
  * every方法
  *     
  *     //功能
  *     //遍历数组的所有元素
  *     //回调函数只有所有元素都返回true整个翻翻才会返回true 只要有一个返回false，这个函数就会返回false 
  * 
  *   
  *     //返回值 布尔值 
  *     
  * 
  * 
  * 
  */

//  let arr5 = [1,2,3,4].every((ele,i)=>{
//   return ele>3   //返回值只要有一次返回为真就返回true 

// })

// console.log(arr5)


 /**
  * reduce方法
  *     //功能
  *     //遍历所有的数组元素
  *     //
  * 
  *     
  *     
  *   第一个参数是一个回调函数 
  *     回调函数的第一个参数 ：累计起来的一个值  accumulator
  *     回调函数的第二个参数：数组元素 currentValue
  *     回调函数的第三个参数：数组元素的索引  currentIndex
  * 
  *   第二个参数是用作第一个调用 callback的第一个参数的值 即 accu的初始值  //如果不指定初始值，会把数组的第一个元素作为初始值
  * 
  *   
  *   //reduce  
  * 
  *   //返回值是 回调函数最后一次返回的值   
  * 
  */


  //案例 累加
 let arr6 = [1,2,3,4].reduce((accu,ele,i)=>{
    
  console.log(accu,ele)

  return accu +ele

},0)

console.log(arr6);  //10 


//案例2 reduce可以监控状态的变化
let arr7 = [1,2,3,4].reduce((accu,ele,i)=>{
  if(ele>1) accu.push(ele);

  return accu 

},[])

console.log(arr7);  //[2, 3, 4]
